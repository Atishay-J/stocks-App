[{"F:\\VS CODE PROJECTS\\React PlayGround\\stocks_app\\src\\index.js":"1","F:\\VS CODE PROJECTS\\React PlayGround\\stocks_app\\src\\App.js":"2","F:\\VS CODE PROJECTS\\React PlayGround\\stocks_app\\src\\Navbar.js":"3","F:\\VS CODE PROJECTS\\React PlayGround\\stocks_app\\src\\sideMenu.js":"4","F:\\VS CODE PROJECTS\\React PlayGround\\stocks_app\\src\\SideMenu.js":"5","F:\\VS CODE PROJECTS\\React PlayGround\\stocks_app\\src\\SideMenuBtn.js":"6","F:\\VS CODE PROJECTS\\React PlayGround\\stocks_app\\src\\ImgAssets.js":"7","F:\\VS CODE PROJECTS\\React PlayGround\\stocks_app\\src\\ProfitLossCalc.js":"8","F:\\VS CODE PROJECTS\\React PlayGround\\stocks_app\\src\\Main.js":"9","F:\\VS CODE PROJECTS\\React PlayGround\\stocks_app\\src\\StockCard.js":"10","F:\\VS CODE PROJECTS\\React PlayGround\\stocks_app\\src\\ShowProfitLoss.js":"11"},{"size":432,"mtime":1609995252479,"results":"12","hashOfConfig":"13"},{"size":257,"mtime":1610026099202,"results":"14","hashOfConfig":"13"},{"size":742,"mtime":1610011904921,"results":"15","hashOfConfig":"13"},{"size":585,"mtime":1610019503230,"results":"16","hashOfConfig":"13"},{"size":585,"mtime":1610019503230,"results":"17","hashOfConfig":"13"},{"size":250,"mtime":1610090546360,"results":"18","hashOfConfig":"13"},{"size":444,"mtime":1610015068424,"results":"19","hashOfConfig":"13"},{"size":9885,"mtime":1610433224026,"results":"20","hashOfConfig":"13"},{"size":124,"mtime":1610028399931,"results":"21","hashOfConfig":"13"},{"size":477,"mtime":1610423742037,"results":"22","hashOfConfig":"13"},{"size":704,"mtime":1610433233055,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"et6j0r",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\VS CODE PROJECTS\\React PlayGround\\stocks_app\\src\\index.js",[],["49","50"],"F:\\VS CODE PROJECTS\\React PlayGround\\stocks_app\\src\\App.js",[],"F:\\VS CODE PROJECTS\\React PlayGround\\stocks_app\\src\\Navbar.js",[],"F:\\VS CODE PROJECTS\\React PlayGround\\stocks_app\\src\\sideMenu.js",[],"F:\\VS CODE PROJECTS\\React PlayGround\\stocks_app\\src\\SideMenu.js",[],"F:\\VS CODE PROJECTS\\React PlayGround\\stocks_app\\src\\SideMenuBtn.js",[],"F:\\VS CODE PROJECTS\\React PlayGround\\stocks_app\\src\\ImgAssets.js",[],"F:\\VS CODE PROJECTS\\React PlayGround\\stocks_app\\src\\ProfitLossCalc.js",["51","52","53"],"// ** Init API **\r\n\r\nimport React, { useState } from \"react\";\r\nimport StockCard from \"./StockCard\";\r\nimport ShowProfitLoss from \"./ShowProfitLoss\";\r\nimport Skeleton from \"react-loading-skeleton\";\r\n\r\nlet apiUrl = \"https://www.alphavantage.co/query?function=SYMBOL_SEARCH&\";\r\nconst ApiKey = process.env.REACT_APP_API_KEY;\r\n\r\n// =============================================================================\r\n// stockName Autocomplete (currently disabled, due to API Calls restrictions)\r\n// =============================================================================\r\n// let matchingResults;\r\n\r\n// function autocomplete(event) {\r\n//   let searchInput = event.target.value;\r\n//   let query = `${apiUrl}keywords=${searchInput}&apikey=${ApiKey}`;\r\n\r\n//   console.log(query);\r\n//   if (searchInput === \"\") {\r\n//     console.log(\"No INPUT\");\r\n//   } else {\r\n//     fetch(query)\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         matchingResults = data;\r\n//         console.log(matchingResults);\r\n//       })\r\n//       .catch((error) => {\r\n//         console.log(\"Error\", error);\r\n//       });\r\n//   }\r\n// }\r\n//===============================================================================\r\nlet stockName;\r\nlet numOfStocks;\r\nlet buyingPrice;\r\nlet curStock;\r\nlet curData = \"\";\r\nvar stocksWithSimilarName = [];\r\nlet loader = true;\r\n\r\n//======================= GET USER INPUT VALUES========================\r\n\r\nfunction getValues() {\r\n  stockName = document.getElementById(\"stockNameInput\").value;\r\n  numOfStocks = document.getElementById(\"numberOfStocksInput\").value;\r\n  buyingPrice = document.getElementById(\"buyingPriceInput\").value;\r\n\r\n  console.log(stockName, \"\\n\", numOfStocks, \"\\n\", buyingPrice);\r\n}\r\n\r\n//===============================================================================\r\n//                        REACT FUNCTION\r\n// ==============================================================================\r\nfunction ProfitLossCalc() {\r\n  const [stockList, setStockList] = useState([]);\r\n  const [selectedStock, setSelectedStock] = useState();\r\n  const [showResult, setShowResult] = useState(false);\r\n  const [selectedStockData, setSelectedStockData] = useState({\r\n    open: \"\",\r\n    close: \"\",\r\n    volume: \"\",\r\n    high: \"\",\r\n    low: \"\",\r\n  });\r\n  const [showLoader, setShowLoader] = useState();\r\n\r\n  //=============================================================\r\n  //              FINDING SIMILAR STOCKS LIST (ASYNC FETCH 1)\r\n  //=============================================================\r\n\r\n  async function getSimilarStocks() {\r\n    setShowLoader(true);\r\n    getValues();\r\n    let query = `${apiUrl}keywords=${stockName}&apikey=${ApiKey}`;\r\n    console.log(\"API URL IS \", query);\r\n\r\n    let response = await fetch(query);\r\n    let data = await response.json();\r\n\r\n    console.log(\"FIRST ASYNC FETCH DATA IS (INFUNCTION)\", data);\r\n    setShowLoader(false);\r\n    return data;\r\n  }\r\n\r\n  //==============================================================\r\n  //                ON SUBMIT/CLICK FUNCTION\r\n  //==============================================================\r\n\r\n  function findStock() {\r\n    // getValues();\r\n    // let query = `${apiUrl}keywords=${stockName}&apikey=${ApiKey}`;\r\n    // console.log(query);\r\n    //=================== FETCHING DATA =======================\r\n    // fetch(query)\r\n    //   .then((response) => response.json())\r\n    //   .then((data) => {\r\n    //     stocksWithSimilarName = data.bestMatches;\r\n    //     let arr = stocksWithSimilarName.map((item, index) => {\r\n    //       return {\r\n    //         name: item[\"2. name\"],\r\n    //         symbol: item[\"1. symbol\"],\r\n    //         region: item[\"4. region\"],\r\n    //       };\r\n    //     });\r\n    //     setStockList(arr);\r\n    //     loader = false;\r\n    //   });\r\n    // setShowResult(false);\r\n    getSimilarStocks().then((result) => {\r\n      setShowLoader(true);\r\n      console.log(\"FIRST ASYNC FETCH RESULT IS (CALLING) \", result);\r\n      stocksWithSimilarName = result.bestMatches;\r\n      let arr = stocksWithSimilarName.map((item, index) => {\r\n        return {\r\n          name: item[\"2. name\"],\r\n          symbol: item[\"1. symbol\"],\r\n          region: item[\"4. region\"],\r\n        };\r\n      });\r\n      setStockList(arr);\r\n      // loader = false;\r\n      setShowLoader(false);\r\n      console.log(\"LOADER VALUE FROM FIRST FETCH \", loader);\r\n\r\n      setShowResult(false);\r\n    });\r\n  }\r\n\r\n  //==============================================================\r\n  //                SELECT STOCK FROM LIST FUNCTION\r\n  //==============================================================\r\n\r\n  function selectStock(e) {\r\n    setShowLoader(true);\r\n    curStock = e.target.nextSibling.firstChild.innerHTML;\r\n    setSelectedStock(curStock);\r\n\r\n    fetchSelectedStockData(curStock).then((result) => {\r\n      console.log(\"WE GOT THE FETCH RESULT \", result);\r\n\r\n      let arr = \"\";\r\n\r\n      for (let k in result[\"Time Series (Daily)\"]) {\r\n        arr = result[\"Time Series (Daily)\"][k];\r\n        console.log(\"THE ARR GOT THE DATA\", arr);\r\n        break;\r\n      }\r\n      curData = {\r\n        open: arr[\"1. open\"],\r\n        high: arr[\"2. high\"],\r\n        low: arr[\"3. low\"],\r\n        close: arr[\"4. close\"],\r\n        volume: arr[\"5. volume\"],\r\n      };\r\n      // setSelectedStockData({\r\n      //   open: curData.opens,\r\n      //   high: arr[\"2. high\"],\r\n      //   low: arr[\"3. low\"],\r\n      //   close: arr[\"4. close\"],\r\n      //   volume: arr[\"5. volume\"],\r\n      // });\r\n      console.log(\"THE CUR DATA IS \", curData);\r\n      // console.log(\"THe sleected stock data is ==\", selectedStockData);\r\n      setShowResult(true);\r\n      // setShowLoader(false);\r\n      // loader = false;\r\n\r\n      setShowLoader(false);\r\n    });\r\n  }\r\n\r\n  //==============================================================\r\n  //            GET DATA OF SELECTED STOCK (ASYNC FETCH 2)\r\n  //==============================================================\r\n\r\n  let curStockKey = selectedStock;\r\n\r\n  async function fetchSelectedStockData(value) {\r\n    setShowLoader(true);\r\n    let stockDataURL = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${value}&apikey=${ApiKey}`;\r\n\r\n    console.log(\"API URL IS \", stockDataURL);\r\n\r\n    let response = await fetch(stockDataURL);\r\n    let data = await response.json();\r\n\r\n    console.log(\"FETCHING IS Going done NOW \", data);\r\n    // setShowLoader(false);\r\n    // loader = false;\r\n    setShowLoader(false);\r\n    return data;\r\n  }\r\n\r\n  //   await fetch(stockDataURL)\r\n  //     .then(async (response) => response.json())\r\n  //     .then(async (data) => {\r\n  //       console.log(\"Fetching started....\");\r\n  //       console.log(\"THE DATA THAT FETCH GOT \", data);\r\n  //       for (let k in data[\"Time Series (Daily)\"]) {\r\n  //         arr = data[\"Time Series (Daily)\"][k];\r\n  //         console.log(\"THE ARR GOT THE DATA\", arr);\r\n  //         break;\r\n  //       }\r\n  //       // curData = {\r\n  //       //   open: arr[\"1. open\"],\r\n  //       //   high: arr[\"2. high\"],\r\n  //       //   low: arr[\"3. low\"],\r\n  //       //   close: arr[\"4. close\"],\r\n  //       //   volume: arr[\"5. volume\"],\r\n  //       // };\r\n  //       setSelectedStockData(arr);\r\n  //     });\r\n  //   console.log(\"THE CUR DATA IS \", curData);\r\n  //   // stockDataURL = \"\";\r\n  // }\r\n\r\n  //================================================================================\r\n  //                              SHOW OUTPUT\r\n  //===============================================================================\r\n\r\n  let output;\r\n  // let rugby = <Skeleton height={100} />;\r\n\r\n  // if (showResult) {\r\n  //   output = (\r\n  //     <ShowProfitLoss\r\n  //       curstock={selectedStock}\r\n  //       stockData={selectedStockData}\r\n  //       stocksNum={numOfStocks}\r\n  //       stocksPrice={buyingPrice}\r\n  //     />\r\n  //   );\r\n  // } else {\r\n  //   output = stockList && (\r\n  //     <div>\r\n  //       {stockList.map((item, index) => (\r\n  //         <StockCard\r\n  //           key={index}\r\n  //           click={selectStock}\r\n  //           title={item.name}\r\n  //           symbol={item.symbol}\r\n  //           region={item.region}\r\n  //         />\r\n  //       ))}\r\n  //     </div>\r\n  //   );\r\n  // }\r\n\r\n  console.log(\"VALUE OF SHOW LOADER IS \", showLoader);\r\n  if (showLoader) {\r\n    output = <Skeleton />;\r\n  } else {\r\n    // output = <h1>LOaded...</h1>;\r\n    showResult\r\n      ? (output = (\r\n          <ShowProfitLoss\r\n            curstock={selectedStock}\r\n            // stockData={selectedStockData}\r\n            stockData={curData}\r\n            stocksNum={numOfStocks}\r\n            stocksPrice={buyingPrice}\r\n          />\r\n        ))\r\n      : (output = stockList && (\r\n          <div>\r\n            {stockList.map((item, index) => (\r\n              <StockCard\r\n                key={index}\r\n                click={selectStock}\r\n                title={item.name}\r\n                symbol={item.symbol}\r\n                region={item.region}\r\n              />\r\n            ))}\r\n          </div>\r\n        ));\r\n  }\r\n\r\n  return (\r\n    <div id=\"mainCalcCont\">\r\n      <h4 className=\"calcHeading\">Calculate Profit / Loss</h4>\r\n\r\n      <div className=\"inputCont\">\r\n        <input\r\n          className=\"inputField\"\r\n          id=\"stockNameInput\"\r\n          type=\"text\"\r\n          placeholder=\"Enter Stock Name\"\r\n          // onChange={autocomplete}\r\n        />\r\n\r\n        <input\r\n          className=\"inputField\"\r\n          id=\"buyingPriceInput\"\r\n          type=\"number\"\r\n          placeholder=\"Buying Price\"\r\n        />\r\n        <input\r\n          className=\"inputField\"\r\n          id=\"numberOfStocksInput\"\r\n          type=\"number\"\r\n          placeholder=\"Number of stocks\"\r\n        />\r\n        <button className=\"submitBtn\" onClick={findStock}>\r\n          Search\r\n        </button>\r\n      </div>\r\n\r\n      {/*   **LIST OUPUT**   */}\r\n      {output}\r\n    </div>\r\n  );\r\n}\r\nexport default ProfitLossCalc;\r\n","F:\\VS CODE PROJECTS\\React PlayGround\\stocks_app\\src\\Main.js",[],"F:\\VS CODE PROJECTS\\React PlayGround\\stocks_app\\src\\StockCard.js",["54"],"import Skeleton from \"react-loading-skeleton\";\r\nimport \"./stockCard.css\";\r\nfunction StockCard(props) {\r\n  return (\r\n    <div className=\"stockCardCont\">\r\n      <h2 className=\"stockCardTitle\" onClick={props.click}>\r\n        {props.title}\r\n      </h2>\r\n      <div className=\"stockCardInfoCont\">\r\n        <h3 className=\"stockCardSymbol\">{props.symbol}</h3>\r\n        <h5 className=\"stockCardRegion\">{props.region}</h5>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default StockCard;\r\n","F:\\VS CODE PROJECTS\\React PlayGround\\stocks_app\\src\\ShowProfitLoss.js",["55","56","57"],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":61,"column":10,"nodeType":"64","messageId":"65","endLine":61,"endColumn":27},{"ruleId":"62","severity":1,"message":"66","line":61,"column":29,"nodeType":"64","messageId":"65","endLine":61,"endColumn":49},{"ruleId":"62","severity":1,"message":"67","line":179,"column":7,"nodeType":"64","messageId":"65","endLine":179,"endColumn":18},{"ruleId":"62","severity":1,"message":"68","line":1,"column":8,"nodeType":"64","messageId":"65","endLine":1,"endColumn":16},{"ruleId":"62","severity":1,"message":"69","line":7,"column":7,"nodeType":"64","messageId":"65","endLine":7,"endColumn":18},{"ruleId":"62","severity":1,"message":"70","line":8,"column":7,"nodeType":"64","messageId":"65","endLine":8,"endColumn":17},{"ruleId":"71","severity":1,"message":"72","line":21,"column":7,"nodeType":"73","endLine":21,"endColumn":11},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'selectedStockData' is assigned a value but never used.","Identifier","unusedVar","'setSelectedStockData' is assigned a value but never used.","'curStockKey' is assigned a value but never used.","'Skeleton' is defined but never used.","'numOfStocks' is assigned a value but never used.","'stockPrice' is assigned a value but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]